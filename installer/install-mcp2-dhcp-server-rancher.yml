---
- hosts: net-boot-service
  tasks:
    - name: Install prerequisites
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - unzip
        - git
        - build-essential
        - liblzma-dev
        - mkisofs
        - tftpd-hpa
        - apache2

    - name: Configure firewall
      command: "ufw disable" # TODO: Come back and correctly configure this!

    - name: Get iPXE
      git:
        repo: git://git.ipxe.org/ipxe.git
        dest: /usr/local/src/ipxe
        recursive: yes

    - name: Build iPXE
      command: make bin/undionly.kpxe
      args:
        chdir: /usr/local/src/ipxe/src

    - name: Install iPXE
      command: cp /usr/local/src/ipxe/src/bin/undionly.kpxe /var/lib/tftpboot

#   - name: Install coreos-ipxe-server
#      get_url:
#        url: "https://github.com/kelseyhightower/coreos-ipxe-server/releases/download/v{{ coreos_ipxe_server_version }}/coreos-ipxe-server-{{ coreos_ipxe_server_version }}-linux-amd64"
#        dest: /usr/local/bin/coreos-ipxe-server
#        owner: root
#        group: root
#        mode: "u=rwx,g=rx,o="

#    - name: Configure coreos-ipxe-server
#      template:
#        src: coreos-ipxe-server.defaults.j2
#        dest: /etc/default/coreos-ipxe-server

#    - name: Create coreos-ipxe-server directories
#      file:
#        dest: "{{coreos_ipxe_server_data_dir}}/{{ item }}"
#        state: directory
#        owner: root
#        group: root
#        mode: "u=rwx,g=rx,o="
#      with_items:
#        - configs
#        - images
#        - images/amd64-usr/310.1.0
#        - profiles
#        - sshkeys

#    - name: Create default cloud-config for coreos-ipxe-server
#      copy:
#        src: development.yml
#        dest: "{{ coreos_ipxe_server_data_dir }}/configs/development.yml"

#    - name: Create default profile for coreos-ipxe-server
#      copy:
#        src: development.json
#        dest: "{{ coreos_ipxe_server_data_dir }}/profiles/development.json"

#    - name: Copy default SSH key for coreos-ipxe-server
#      copy:
#        src: "{{ coreos_default_ssh_key_file }}"
#        dest: "{{ coreos_ipxe_server_data_dir }}/sshkeys/coreos.pub"

#    - name: Download default images for coreos-ipxe-server
#      get_url:
#        url: "http://storage.core-os.net/coreos/amd64-usr/310.1.0/{{ item }}"
#        dest: "{{ coreos_ipxe_server_data_dir }}/images/amd64-usr/310.1.0/{{ item }}"
#        owner: root
#        group: root
#        mode: "u=rw,g=r,o="
#      with_items:
#        - coreos_production_pxe_image.cpio.gz
#        - coreos_production_pxe.vmlinuz

#    - name: Create coreos-ipxe-server service (systemd)
#      copy:
#        src: coreos-ipxe-server.service
#        dest: /lib/systemd/system/coreos-ipxe-server.service
#        owner: root
#        group: root
#        mode: "u=rwx,g=rx,o="

#    - name: Link coreos-ipxe-server service (systemd)
#      file:
#        src: /lib/systemd/system/coreos-ipxe-server.service
#        dest: /etc/systemd/system/multi-user.target.wants/coreos-ipxe-server.service
#        state: link
#        owner: root
#        group: root
#        mode: "u=rwx,g=rx,o="

#    - name: Start coreos-ipxe-server service (systemd)
#      systemd:
#        name: coreos-ipxe-server.service
#        enabled: yes
#        state: started
#        daemon_reload: yes


# Installs the DHCP Server and config files
    - name: Install mcp2-dhcp-server
      unarchive:
        src: "https://github.com/DimensionDataResearch/mcp2-dhcp-server/releases/download/v{{ mcp2_dhcp_server_version }}/mcp2-dhcp-server.v{{ mcp2_dhcp_server_version }}.linux-amd64.zip"
        dest: /usr/local/bin
        remote_src: yes
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Configure mcp2-dhcp-server
      template:
        src: mcp2-dhcp-server.yml.j2
        dest: /etc/mcp2-dhcp-server.yml
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Create mcp2-dhcp-server service (systemd)
      copy:
        src: mcp2-dhcp-server.service
        dest: /lib/systemd/system/mcp2-dhcp-server.service
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Link mcp2-dhcp-server service (systemd)
      file:
        src: /lib/systemd/system/mcp2-dhcp-server.service
        dest: /etc/systemd/system/multi-user.target.wants/mcp2-dhcp-server.service
        state: link
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Start mcp2-dhcp-server service (systemd)
      systemd:
        name: mcp2-dhcp-server.service
        enabled: yes
        state: started
        daemon_reload: yes

# Installs cloud config server

# Installs the DHCP Server and config files
    - name: Install Cloud-config-server
      unarchive:
        src: "https://github.com/DimensionDataResearch/dd-rancheros-cloud-config/releases/download/v{{ cloud_config_server }}/cloud-config-server.v{{cloud_config_server}}.linux-amd64.zip"
        dest: /usr/local/bin
        remote_src: yes
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Configure Cloud-config-server
      template:
        src: cloud-config-server.yml.j2
        dest: /etc/cloud-config-server.yml
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Create cloud-config-server service (systemd)
      copy:
        src: cloud-config-server.service
        dest: /lib/systemd/system/cloud-config-server.service
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    - name: Link cloud-config-server service (systemd)
      file:
        src: /lib/systemd/system/cloud-config-server.service
        dest: /etc/systemd/system/multi-user.target.wants/cloud-config-server.service
        state: link
        owner: root
        group: root
        mode: "u=rwx,g=rx,o="

    

# Temp Symbolic Link for config need to fix app
    - file:
        src: /etc/cloud-config-server.yml
        dest: /usr/local/bin/cloud-config-server.yml
        state: link

    - name: Start cloud-config-server service (systemd)
      systemd:
        name: cloud-config-server.service
        enabled: yes
        state: started
        daemon_reload: yes


###### Rancher OS Build


    - name: Create Directory for RancherOS
      file: 
          path: /var/www/html/rancheros 
          state: directory
    
    - name: Create Directory for RancherOS Directory for Version 1.0.4
      file: 
        path: /var/www/html/rancheros/{{ rancheros_version }}
        state: directory
    
    - name: Download RancherOS Init RD
      get_url:
        url: https://github.com/rancher/os/releases/download/{{ rancheros_version }}/initrd
        dest: /var/www/html/rancheros/{{ rancheros_version }}/initrd
        
    - name: Download RancherOS Init RD
      get_url:
        url: https://github.com/rancher/os/releases/download/{{ rancheros_version }}/vmlinuz
        dest: /var/www/html/rancheros/{{ rancheros_version }}/vmlinuz
    
    - name: Configure RancherOS iPXE
      template:
        src: rancheros.ipxe.j2
        dest: /var/www/html/rancheros.ipxe
        owner: root
        group: root
        mode: 0755

  # - name: Configure RancherOS Cloud_Config.yml
   #   template:
    #    src: rancher-server.yml.j2
     #   dest: /var/www/html/rancher-server.yml
      #  owner: root
       # group: root
        #mode: 0755

